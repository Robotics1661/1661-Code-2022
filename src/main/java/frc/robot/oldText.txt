
 // // Spinning Intake
    // if (intakeLowered) {
    //   // rightIntake.set(ControlMode.PercentOutput, intakeTestingSpeed);
    //   // leftIntake.set(ControlMode.PercentOutput, intakeTestingSpeed);
    //   // horizontalAgitator.set(ControlMode.PercentOutput, haTestingSpeed);
    //   System.out.println("Intake spinning.");
    // }
    // else {
    //   // rightIntake.set(ControlMode.PercentOutput, 0);
    //   // leftIntake.set(ControlMode.PercentOutput, 0);
    //   // horizontalAgitator.set(ControlMode.PercentOutput, 0);
    //   System.out.println("Intake not spinning.");
    // }

<< TEST PERIODIC >>

System.out.println("bruh");
    

    double x = driveBox.getRawAxis(3);

      if (x > .1) {
        oneMotor.set(x);
    }
    else {
      oneMotor.set(0);
    }


    //testTalon.set(ControlMode.PercentOutput, 0.3);
    // oneMotor.set(0.1);
    // System.out.println("oneMotor: " + oneMotor.getSelectedSensorPosition());
    //  anotherMotor.set(0.1);
    // System.out.println("anotherMotor: " + anotherMotor.getSelectedSensorPosition());

    // Testing the turret
    // double leftTrigger = driveBox.getRawAxis(2);
    // Testing the Intake

    // boolean intakeIsRaised = false;
    // System.out.println(driveBox.getRawButton(right_bumper));

    // Just for the left trigger
    // if(leftTrigger > .1) {
    //   testTalon.set(ControlMode.PercentOutput, leftTrigger/2);
    //   System.out.println(leftTrigger);
    // }



    // SHOOTING

    
      // if (x > .2) {
      //   oneMotor.set(-0.15);
      //   anotherMotor.set(0.15);
      //   System.out.println("Shooting");
      // }
      // else {
      //   oneMotor.set(0.0);
      //   anotherMotor.set(0.0);
      //   System.out.println("Not shooting");
      // }





    // if (x > .1) {
    //   // intakeRight.set(ControlMode.PercentOutput, x);
    //   // intakeLeft.set(ControlMode.PercentOutput, x);
    // }
    // else {
    //   // intakeRight.set(ControlMode.PercentOutput, 0);
    //   // intakeLeft.set(ControlMode.PercentOutput, x);
    // }
    

    // if (driveBox.getAButton()) {
    //   intakeIsRaised = !intakeIsRaised;
    //   System.out.println("BUTTON WORKS");
    // }

    // Raise/Lower Intake
    
    // if (driveBox.getAButton()) {
    //   intakeRaise.set(DoubleSolenoid.Value.kForward);
    //   status = "Intake: Up";
    // }
    // else if (driveBox.getBButton()) {
    //   intakeRaise.set(DoubleSolenoid.Value.kReverse);
    //   status = "Intake: Down";
    // }
    // System.out.println(status);

    // intakeRaise.set(DoubleSolenoid.Value.kReverse);

    // Write code for up/down w/ pneumatics (one)




    // Drive

    // drive.executeTank(); //Uses both sticks on driveBox        



<< TEST INIT >>

System.out.print("crystal clear cutlery");
    // oneMotor.setSelectedSensorPosition(0);
    // ControlMode position = 
    //  oneMotor.set(ControlMode.Position, 50000);

    // oneMotor.config_kP(3, 0.45, 0);
    // oneMotor.config_kI(3, 0.0, 0);
    // oneMotor.config_kD(3, 4, 0);

    // oneMotor.set(ControlMode.Position, 5000);

    // intakeRight.configFactoryDefault();
    // intakeLeft.configFactoryDefault();

    oneMotor.configFactoryDefault();
    anotherMotor.configFactoryDefault();

    // intakeLeft.set(ControlMode.Follower, intakeRight.getDeviceID());


    << HEADER STUFF >>

    private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  private TalonSRX testTalon = new TalonSRX(2);

  

  XboxController driveBox = new XboxController(1);
  // final static int right_trigger = 4;

  boolean shooting = false;

  String status = "Intake: Down";
  
  WPI_TalonFX oneMotor = new  WPI_TalonFX(2);
  WPI_TalonFX anotherMotor = new  WPI_TalonFX(3);

  int right_bumper = 5;

  WPI_TalonFX okayFalcon = new  WPI_TalonFX(11);

  // Counterclockwise, Master
  TalonSRX intakeRight = new TalonSRX(2);
  

  // Counterclockwise, Slave
  TalonSRX intakeLeft = new TalonSRX(4);

  // Up-Down Pneumatics
  DoubleSolenoid intakeRaise = new DoubleSolenoid(0, 1);


  // // Drive
  // Compressor compressor = new Compressor(0);

  // int front_left_drive = 0;
  // int front_right_drive = 0;
  // int back_left_drive = 0;
  // int back_right_drive = 0; 
    
  // WPI_TalonFX fLeft = new WPI_TalonFX(front_left_drive);
  // WPI_TalonFX fRight = new WPI_TalonFX(front_right_drive);
  // WPI_TalonFX bLeft = new WPI_TalonFX(back_left_drive);
  // WPI_TalonFX bRight = new WPI_TalonFX(back_right_drive);

  // SpeedControllerGroup left = new SpeedControllerGroup(fLeft, bLeft);
  // SpeedControllerGroup right = new SpeedControllerGroup(fRight, bRight);

  // DifferentialDrive tank = new DifferentialDrive(left, right);

   Drive drive = new Drive();


   
    /*else if (Math.abs(x) < 3) { // NO ATTACKING
      if (getDistanceIn() > 70) { // no crashing, preferably
        if (area < 0.2) { //a little more NO CRASH safety
          drive.moveSpeed(0.3);
        }
      }
    }*/
  }
  

  if (driveBox.getRawButton(a_button)) {
      // if (fRight.getSelectedSensorPosition() < 20000) {
      //   drive.moveSpeed(.3);
      // }
      /*if (currentDistanceInches > 50) { //NOTE: seems a little slow to respond?? maybe slow it down a bit
        drive.moveSpeed(.4);
      }
      else {
        drive.moveSpeed(0);
      }*/
      findTargetStep();

    } else { //If it just runs afterward anyways, this overrides the previous speed setting, and it doesn't move correctly
      // Teleop Tank Drive
      drive.executeTank(); // Uses both sticks on driveBox
    }
    // Testing Code
    // if (driveBox.getRawButton(b_button)) {
    //   testTalon.set(ControlMode.PercentOutput, .2);
    //   System.out.println(testTalon.getMotorOutputPercent());
    // }

     // After getting wheel measurements take raw distance in inches as input & convert to ticks
    // wheel radius = 3 inches
    /*
        collect input in inches
        convert inches to meters
        2048 units per rotation
        distance traveled per rotation = 2PIr * num_rotations
        we want to go from inputted distance (in meters) to encoder units
        first: distance --> num wheel rotations
            num_rotations = distance / (2pi * wheel_radius)
        next: num_rotations --> encoder units
            encoder_units = num_rotations * 2048
    */
  
